from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from aiogram import Bot, Dispatcher, types
import logging
import os
from aiogram.types import Update, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.executor import start_webhook
from fastapi.responses import FileResponse

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = "8164101649:AAFGy5qYM8jsseUKKXe_cW3S5qjmjMznrV8"
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
Bot.set_current(bot)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FastAPI
app = FastAPI()

# –£–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏
app.mount("/static", StaticFiles(directory="/var/www/SoccerGame/static"), name="static")

@app.get("/index.html")
async def serve_index():
    return FileResponse("/var/www/SoccerGame/index.html")

@app.get("/manifest.webmanifest")
async def serve_index():
    return FileResponse("/var/www/SoccerGame/manifest.webmanifest")

@app.get("/ServiceWorker.js")
async def serve_index():
    return FileResponse("/var/www/SoccerGame/ServiceWorker.js")

app.mount("/Build", StaticFiles(directory="/var/www/SoccerGame/Build"), name="build")
app.mount("/TemplateData", StaticFiles(directory="/var/www/SoccerGame/TemplateData"), name="templatedata")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ
@app.get("/webhook")
async def get_webhook_info():
    try:
        webhook_info = await bot.get_webhook_info()
        return webhook_info
    except Exception as e:
        return {"error": str(e)}

# –í–µ–±—Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
@app.post("/webhook")
async def webhook(request: Request):
    try:
        update = await request.json()
        update = Update(**update)

        await dp.process_update(update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"error": str(e)}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É",
            web_app=types.WebAppInfo(url="https://tma-game.ru/index.html")
        )
    )
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É:", reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
@app.on_event("startup")
async def on_startup():
    try:
        webhook_url = "https://tma-game.ru/webhook"
        await bot.set_webhook(webhook_url)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/")
def read_root():
    return {"message": "Telegram Mini App Backend is Running"}
